AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Monitoring System for Error, Batch, and RAG Performance

Parameters:
  DefaultName:
    Type: String
    Default: monitoring
  ServiceType:
    Type: String
    Default: DEV
  PythonVersion:
    Type: String
    Default: python3.11
  StageType:
    Type: String
    Default: latest
  RagPerformanceThreshold:
    Type: Number
    Default: 0.7
    Description: Minimum acceptable RAG performance score

Globals:
  Function:
    Runtime: !Sub ${PythonVersion}
    MemorySize: 3072
    Timeout: 900
    Layers:
      - !Ref MonitoringLayer
    Tags:
      ServiceType: !Sub ${ServiceType}
      DefaultName: !Sub ${DefaultName}

Resources:
  # Layer
  MonitoringLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - !Sub ${PythonVersion}
      ContentUri: layer
      Description: Monitoring system shared library and dependencies
      LayerName: !Sub ${ServiceType}-${DefaultName}-shared-layer
    Metadata:
      BuildMethod: !Sub ${PythonVersion}

  # SNS Topics
  ErrorNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${ServiceType}-${DefaultName}-error-notifications
      TopicName: !Sub ${ServiceType}-${DefaultName}-error-topic

  BatchNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${ServiceType}-${DefaultName}-batch-notifications
      TopicName: !Sub ${ServiceType}-${DefaultName}-batch-topic

  RagNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${ServiceType}-${DefaultName}-rag-notifications
      TopicName: !Sub ${ServiceType}-${DefaultName}-rag-topic

  # CloudWatch Log Group
  ErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/${ServiceType}/errors'
      RetentionInDays: 30

  # Lambda Functions
  MonitoringFunction:
    Type: AWS::Serverless::Function
    DependsOn: ErrorLogGroup
    Properties:
      FunctionName: !Sub ${ServiceType}-monitoring
      Role: !GetAtt MonitoringLambdaRole.Arn
      CodeUri: lambda_functions/services
      Handler: lambda_function.handler
      Environment:
        Variables:
          PERFORMANCE_THRESHOLD: !Ref RagPerformanceThreshold
      Events:
        SlackEvent:
          Type: Api
          Properties:
            Path: /slack/events
            Method: post
        BatchJobStateChange:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
        CloudWatchErrorLog:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: !Sub '/aws/${ServiceType}/errors'
            FilterPattern: 'ERROR'
        RagPerformanceMonitor:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "custom.rag"
      AutoPublishAlias: !Ref StageType

  # IAM Role
  MonitoringLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  # IAM Policy
  MonitoringLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub lambda-${ServiceType}-${DefaultName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ssm:GetParameters"
              - "ssm:GetParameter"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:FilterLogEvents"
              - "logs:GetLogEvents"
              - "logs:StartQuery"
              - "logs:StopQuery"
              - "logs:GetQueryResults"
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*"
          - Effect: "Allow"
            Action:
              - "apigateway:POST"
              - "apigateway:GET"
              - "apigateway:PUT"
              - "apigateway:DELETE"
              - "apigateway:PATCH"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "sns:Publish"
              - "sns:Subscribe"
            Resource: "*"
      Roles:
        - !Ref MonitoringLambdaRole

  # SNS Topic Subscriptions
  ErrorNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ErrorNotificationTopic
      Protocol: lambda
      Endpoint: !GetAtt MonitoringFunction.Arn

  ErrorInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ErrorNotificationTopic

  BatchNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref BatchNotificationTopic
      Protocol: lambda
      Endpoint: !GetAtt MonitoringFunction.Arn

  BatchInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref BatchNotificationTopic

  RagNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref RagNotificationTopic
      Protocol: lambda
      Endpoint: !GetAtt MonitoringFunction.Arn

  RagInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref RagNotificationTopic
